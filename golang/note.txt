程序从main包开始
package main 

导入包
import (
    "fmt"
    "math/rand"
)
也可以，但不推荐
import "fmt"
import "math"


Exported names的规则：大写开头
import "math"
math.pi 会报错，math.Pi 是正确的

函数
add takes two parameters of type int. 并且返回int
func add(x int, y int) int {
    return x + y
}

参数类型相同的话可以
func add(x, y int) int {}


返回多个值的函数
func swap(x, y string) (string, string) {
    return y, x
}
func main() {
    a, b := swap("hello", "world")
    fmt.Println(a, b)
}

Naked Return (建议不要使用，为了优雅在短函数中可以使用)
A return statement without arguments returns the current values of the results
func split(sum int) (x, y int) {
    x = sum * 4 / 9
    y = sum - x
    return
}
func main() {
    fmt.Println(split(17))
}

定义变量(可以在package中 或者 function中)
var c, python, java bool
func main() {
    var i int
    fmt.Println(i, c, python, java)
}

变量初始化
var i, j int = 1, 2
func main() {
    var c, python, java = true, false, "no!"
    fmt.Println(i, j, c, python, java)
}

“短变量”申明(目前只能在function中使用，package中必须以keyword开头例如var, func等)
func main() {
    var i, j int = 1, 2
    k := 3
    c, python, java := true, false, "no!"

    fmt.Println(i, j, k, c, python, java)
}


基础类型有：
bool

string

int  int8  int16  int32  int64
uint uint8 uint16 uint32 uint64 uintptr

byte // alias for uint8

rune // alias for int32
     // represents a Unicode code point

float32 float64

complex64 complex128

未初始化赋值的变量：
0 for numeric types,
false the boolean type, and
"" (the empty string) for strings.

类型转换: T(v)
var i int = 42
var f float64 = float64(i)
var u uint = uint(f)

Or, put more simply:
i := 42
f := float64(i)
u := uint(f)


Type inference 类型推论
var i int
j := i // j is an int

i := 42           // int
f := 3.142        // float64
g := 0.867 + 0.5i // complex128

常量
const World = "世界"
const 不能用 := 来赋值


For循环
sum := 0
for i := 0; i < 10; i++ {
    sum += i
}

for的三个参数可以空着
for ; sum < 1000; {
        sum += sum
    }

while（Go用for代替了while）
for sum < 1000 {
        sum += sum
    }

死循环（while True）
for {
    
}

if语句，去除()。{} 不可省略
if x < 0 {
        return sqrt(-x) + "i"
    }

if之前可以执行一个短语句
if v := math.Pow(x, n); v < lim {
        return v
    }

if else
if v := math.Pow(x, n); v < lim {
        return v
    } else {
        fmt.Printf("%g >= %g\n", v, lim)
    }


For循环练习： 开方
func Sqrt(x float64) float64 {
    z := 1.0
    for i:=0 ; i<10; i++{
        z= z-((z*z-x)/(2*z))
    }
    return z
}

func main() {
    fmt.Println(Sqrt(2))
    fmt.Println(math.Sqrt(2))
}

Switch语句：自动break；fallthrough使其往下执行
switch os := runtime.GOOS; os {
    case "darwin":
        fmt.Println("OS X.")
    case "linux":
        fmt.Println("Linux.")
    default:
        // freebsd, openbsd,
        // plan9, windows...
        fmt.Printf("%s.", os)
    }


today := time.Now().Weekday()
switch time.Friday {
    case today + 0:
        fmt.Println("Today.")
    case today + 1:
        fmt.Println("Tomorrow.")
    case today + 2:
        fmt.Println("In two days.")
    default:
        fmt.Println("Too far away.")
    }

无条件的switch 等同于switch true
t := time.Now()
    switch {
    case t.Hour() < 12:
        fmt.Println("Good morning!")
    case t.Hour() < 17:
        fmt.Println("Good afternoon.")
    default:
        fmt.Println("Good evening.")
    }

延迟执行 defer
A defer statement defers the execution of a function until the surrounding function returns.

The deferred call's arguments are evaluated immediately, but the function call is not executed until the surrounding function returns.
func main() {
    defer fmt.Println("world")

    fmt.Println("hello")
}

延迟执行 defer， 先进后出
Deferred function calls are pushed onto a stack. When a function returns, its deferred calls are executed in last-in-first-out order.
func main() {
    fmt.Println("counting")

    for i := 0; i < 10; i++ {
        defer fmt.Println(i)
    }

    fmt.Println("done")
}


指针（和C类似）
The type *T is a pointer to a T value. Its zero value is nil.
var p *int

The & operator generates a pointer to its operand.
i := 42
p = &i

The * operator denotes the pointer's underlying value.
fmt.Println(*p) // read i through the pointer p
*p = 21         // set i through the pointer p

Unlike C, Go has no pointer arithmetic.
指针不能做算术运算，这点和C不同



定义struct，用type关键词
type Vertex struct {
    X int
    Y int
}

func main() {
    fmt.Println(Vertex{1, 2})
}

用'.'来访问struct中的成员
func main() {
    v := Vertex{1, 2}
    v.X = 4
    fmt.Println(v.X)
}

struct的指针可以直接用dot访问其成员
func main() {
    v := Vertex{1, 2}
    p := &v
    p.X = 3

    fmt.Println(v)
}

struct字面量
var (
    v1 = Vertex{1, 2}  // has type Vertex
    v2 = Vertex{X: 1}  // Y:0 is implicit
    v3 = Vertex{}      // X:0 and Y:0
    p  = &Vertex{1, 2} // has type *Vertex
)

数组定义和使用
func main() {
    var a [2]string
    a[0] = "Hello"
    a[1] = "World"
    fmt.Println(a[0], a[1])
    fmt.Println(a)
}

数组字面量初始化
func main() {
    p := []int{2, 3, 5, 7, 11, 13}
    fmt.Println("p ==", p)

    for i := 0; i < len(p); i++ {
        fmt.Printf("p[%d] == %d\n", i, p[i])
    }
}

分片和python类似
p := []int{2, 3, 5, 7, 11, 13}
    fmt.Println("p ==", p)
    fmt.Println("p[1:4] ==", p[1:4])

    // missing low index implies 0
    fmt.Println("p[:3] ==", p[:3])

    // missing high index implies len(s)
    fmt.Println("p[4:] ==", p[4:])


这里数组有 len 和cap 两个概念，len()返回数组实际有多少个元素，cap()返回数组的容量(capacity)
Making slices
Slices are created with the make function. It works by allocating a zeroed array and returning a slice that refers to that array:

a := make([]int, 5)  // len(a)=5
To specify a capacity, pass a third argument to make:

b := make([]int, 0, 5) // len(b)=0, cap(b)=5

b = b[:cap(b)] // len(b)=5, cap(b)=5
b = b[1:]      // len(b)=4, cap(b)=4


Nil slices，slice默认初始值是Nil
func main() {
    var z []int
    fmt.Println(z, len(z), cap(z))
    if z == nil {
        fmt.Println("nil!")
    }
}

向slice中放入元素，使用append方法
func append(s []T, vs ...T) []T


range：将slice中的key和value遍历取出
The range form of the for loop iterates over a slice or map.
var pow = []int{1, 2, 4, 8, 16, 32, 64, 128}
func main() {
    for i, v := range pow {
        fmt.Printf("2**%d = %d\n", i, v)
    }
}

用_可以省略index的赋值
for _, value := range pow {
    fmt.Printf("%d\n", value)
}







