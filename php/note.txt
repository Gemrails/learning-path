//关于PDO的操作
$resAdd = $this->addVideoRelations($video_id, $toAdd);
//in PDO, $resAdd is '0'; in Mysqli, $resAdd is 0
if((int)$resAdd === 0 ) $resAdd=true;
这里PDO和mysqli作为driver时候，insert的返回结果不同，PDO为“0“， mysqli为0

PDO的使用：
$pdo = \DB::connection()->getPdo();
$sql = 'select * from video where id=1';
$result = $pdo->query($sql);
//dd($result->fetch());

$sql2 = 'select * from video where id<?';
$statement = $pdo->prepare($sql2);
$statement->execute([3]);
$result = $statement->fetchObject();
var_dump($statement->rowCount());

$sql3 = 'select * from video where id<:id';
$statement = $pdo->prepare($sql3);
$statement->execute([':id'=>2]);
$result = $statement->fetchAll();
var_dump($result);
var_dump($statement->rowCount());

关于php发送GET/POST http 请求：
//GET
$query_string = http_build_query($param); //param是array
$opts = array(
    'http'=>array(
        'method'=>"GET",
        'timeout'=>30
    )
);
$context = stream_context_create($opts);
$content = file_get_contents($url, false, $context);
//POST
$options = array(
    'http' => array(
        'header'  => "Content-type: application/x-www-form-urlencoded\r\n",
        'method'  => 'POST',
        'content' => http_build_query($data),
    ),
);
$context = stream_context_create($opts);
$content = file_get_contents($url, false, $context);
或者post还可以用curl来发送：
$ch = curl_init();
curl_setopt($ch, CURLOPT_URL, $url);
curl_setopt($ch, CURLOPT_POST, true);
curl_setopt($ch, CURLOPT_POSTFIELDS, $post);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch, CURLOPT_HEADER, false);
curl_setopt($ch, CURLOPT_TIMEOUT, 30);
$result = curl_exec($ch);
curl_close($ch);
unset($ch);


PHP的notices， warning，error等错误级别需要查看一下
关于如何处理错误：
方法1： set your own error handler before the call and restore the previous error handler later with restore_error_handler().
set_error_handler(function() { /* ignore errors */ });
dns_get_record();
restore_error_handler(); //恢复到之前的处理函数
方法2：Turning errors into exceptions
set_error_handler(function($errno, $errstr, $errfile, $errline, array $errcontext) {
    // error was suppressed with the @-operator
    if (0 === error_reporting()) {
        return false;
    }
    throw new ErrorException($errstr, 0, $errno, $errfile, $errline);
});
try {
    dns_get_record();
} catch (ErrorException $e) {
    // ...
}
The important thing to note when using your own error handler is that it will bypass the error_reporting setting and pass all errors (notices, warnings, etc.) to your error handler. You can set a second argument on set_error_handler() to define which error types you want to receive, or access the current setting using ... = error_reporting() inside the error handler.
方法3（不推荐）：Suppressing the warning
Another possibility is to suppress the call with the @ operator and check the return value of dns_get_record() afterwards. But I'd advise against this as errors/warnings are triggered to be handled, not to be suppressed.


数据库插入数据后的自增id如何获得：
PDO::lastInsertId();
$mysqli->insert_id
有些中间表没有自增的字段，这时返回0；in PDO, $resAdd is '0'; in Mysqli, $resAdd is 0

## 关于 umask
umask() 直接返回当前umask。加参数 “0777”，即设置umask为0777， 并返回之前的umask.
当umask为0时，创建的文件的privilege为 666， 创建的目录的权限为 777.
所以 umask(0), 之后一般是创建文件，并用chmod()显式修改需要的权限。

## 关于 posix_setsid()
可以把当前process设为 session leader. 即把process设置为daemon, session退出后进程还存在。

```php
$pid = pcntl_fork(); // fork
if ($pid < 0)
	die("fork error");
elseif ($pid){ // parent
	echo "exit parent process \n";
	exit;
} else { // child 
	// detatch it from the terminal using posix_setsid()
	$sid = posix_setsid();
	$child_pid = posix_getpid();
	if ($sid < 0)
		exit;
	for($i = 0; $i <= 10; $i++) {
		sleep(2);
		echo "sid is {$sid}, pid is {$child_pid} \n";
	}
	echo "child process is exiting. \n";
	exit;
}
```

## 关于信号
SIG_IGN 是 信号忽略(ignore) 的 handler
SIG_DFL 是 信号默认(default) 的 handler

SIGSTOP 停止进程, can be handled , ignored, blocked;
SIGTSTP is an interactive stop signal. can be handled or blocked. This signal is generated when the user types the SUSP character (normally C-z). 理解为 ctrl-z 发出 SIGTSTP 信号？

SIGTTIN 当后台进程试图读terminal
SIGTTOU 当后台进程试图写terminal

SIGHUP 当terminal关闭时，该信号发给进程

## 关于 flock
有一个 LOCK_NB (non-blocking) bit mask 使得 require lock的过程为非阻塞。这样如果获得锁失败， 可以做其他操作，不用一直等待。











